<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>gov.nasa.worldwind.server</groupId>
        <artifactId>worldwind-serverkit</artifactId>
        <version>0.3.0-ALPHA4</version>
    </parent>
    <artifactId>worldwind-geoserver-dist</artifactId>
    <packaging>pom</packaging>
    <name>WorldWind GeoServer Distribution</name>
    
    <properties>
        <geoserver.dist.folder>geoserver</geoserver.dist.folder>
    </properties>
    
    <dependencies>
        <!-- 
        Dependencies needed for a stand-alone version of Jetty.
        Version number must match dependecies in start.jar
        -->
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-server</artifactId>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-util</artifactId>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-webapp</artifactId>
            <version>${jetty.version}</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-deploy</artifactId>
            <version>${jetty.version}</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-start</artifactId>
            <version>${jetty.version}</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty.toolchain</groupId>
            <artifactId>jetty-schemas</artifactId>
            <version>3.1.M0</version>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.1.0</version>
        </dependency>
        <dependency>
            <groupId>tomcat</groupId>
            <artifactId>jasper-runtime</artifactId>
        </dependency>
        <dependency>
            <groupId>tomcat</groupId>
            <artifactId>jasper-compiler</artifactId>
        </dependency>
        <dependency>
            <groupId>tomcat</groupId>
            <artifactId>jasper-compiler-jdt</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-el</groupId>
            <artifactId>commons-el</artifactId>
        </dependency>
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-pool</groupId>
            <artifactId>commons-pool</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.ant</groupId>
            <artifactId>ant</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>commons-logging</groupId>
                    <artifactId>commons-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
        </dependency>
    </dependencies>
    
    <build>
        <plugins>
            
            <!--
            Dependency manipulation (copy, unpack) and analysis.
            -->
            <plugin>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <!-- 
                    Copy all the Jetty dependencies, including transient dependencies, 
                    to the target/dependency folder for inclusion in the distribution.
                    -->
                    <execution>
                        <id>copyDependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            
            <!--
            Run a set of ant tasks from a phase of the build.
            -->         
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>                    
                    <!-- Remove some unwanted dependencies that get pulled over by copy-dependencies above--> 
                    <execution>
                        <id>removeDependencies</id>
                        <phase>package</phase>
                        <configuration>
                            <tasks>
                                <delete>
                                    <fileset dir="${project.build.directory}/dependency" includes="servlet-api-*.jar,core*.jar"/>
                                </delete>
                            </tasks>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                    
                    <!--                    
                    Unzip the Windows Java Server JRE
                    There's no guarantee that a command line unzip tool is available in Windows,
                    so we unzip the JRE here and include the unzipped files in an assembly component.
                    -->
                    <execution>
                        <id>unpackJdk</id>
                        <phase>package</phase>
                        <configuration>
                            <tasks>
                                <untar src="${project.basedir}/src/main/resources/java/server-jre-8u121-windows-x64.tar.gz" dest="${project.build.directory}/java-win64" compression="gzip"/>
                            </tasks>                            
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                    
                    <!--                    
                    Unzip the GDAL natives and data.
                    There's no guarantee that a command line 'unzip' tool is available in Windows or Linux,
                    so we unzip the GDAL components here and include the unzipped files in  
                    Windows assemblies or create .tgz's for Linux assemblies.
                    -->
                    <execution>
                        <id>unpackGDAL</id>
                        <phase>package</phase>
                        <configuration>
                            <tasks>
                                <unzip src="${project.basedir}/src/main/resources/gdal/geoserver-${gs.version}-gdal-plugin.zip" dest="${project.build.directory}/gdal/geoserver-${gs.version}-gdal-plugin"/>
                                <unzip src="${project.basedir}/src/main/resources/gdal/imageio-ext-${imageio-ext.version}-jars.zip" dest="${project.build.directory}/gdal/imageio-ext-${imageio-ext.version}-jars"/>
                                <unzip src="${project.basedir}/src/main/resources/gdal/gdal-1.9.2-MSVC2010-x64.zip" dest="${project.build.directory}/gdal/win64"/>
                                <unzip src="${project.basedir}/src/main/resources/gdal/gdal-data.zip" dest="${project.build.directory}/gdal"/>
                            </tasks>                            
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>

                    <!--
                    Repackage .zips as .tgz's for Linux, as some distribtions don't have an unzip command.
                    -->
                    <execution>
                        <id>zip2tgz</id>
                        <phase>package</phase>
                        <configuration>
                            <tasks>
                                <tar destfile="${project.build.directory}/gdal/geoserver-${gs.version}-gdal-plugin.tgz" compression="gzip">
                                    <zipfileset src="${project.basedir}/src/main/resources/gdal/geoserver-${gs.version}-gdal-plugin.zip"/>
                                </tar>
                                <tar destfile="${project.build.directory}/gdal/imageio-ext-${imageio-ext.version}-jars.tgz" compression="gzip">
                                    <zipfileset src="${project.basedir}/src/main/resources/gdal/imageio-ext-${imageio-ext.version}-jars.zip"/>
                                </tar>
                                <tar destfile="${project.build.directory}/gdal/gdal-data.tgz" compression="gzip">
                                    <zipfileset src="${project.basedir}/src/main/resources/gdal/gdal-data.zip"/>
                                </tar>
                            </tasks>                            
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>editScripts</id>
                        <phase>package</phase>
                        <configuration>
                            <tasks>
                                <!--Copy scripts to build dir for editing-->
                                <copy todir="${project.build.directory}/gdal" file="${project.basedir}/src/main/resources/gdal/setup-gdal.sh"/>
                                <!--Edit the version numbers in the scripts-->
                                <replace token= "GEOSERVER_VER=" value="GEOSERVER_VER=${gs.version} #Set by ant-task. was: " dir="${project.build.directory}/gdal">                                 
                                    <include name="**/*.sh"/>
                                </replace>
                                <replace token= "IMAGEIO_EXT_VER=" value="IMAGEIO_EXT_VER=${imageio-ext.version} #Set by ant-task. was: " dir="${project.build.directory}/gdal">                                 
                                    <include name="**/*.sh"/>
                                </replace>
                            </tasks>                            
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
                        
            <!--
            Build the assembly (distribution) of sources and/or binaries.
            See: https://maven.apache.org/plugins-archives/maven-assembly-plugin-2.2.2/index.html
            -->
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>install</phase>
                        <configuration>
                            <descriptors>

                                <!--Binary distibution content-->
                                <descriptor>src/assembly/bin-assembly.xml</descriptor>
                                
                                <!--Windows x64 distribution-->
                                <descriptor>src/assembly/win64-assembly.xml</descriptor>
                                
                                <!--Linux/Ubuntu x64 distirbution-->
                                <descriptor>src/assembly/ubuntu64-assembly.xml</descriptor>
                                
                                <!--Linux/CentOS x64) distribution-->
                                <descriptor>src/assembly/centos64-assembly.xml</descriptor>
                                
                                <!--WAR file distibution content -->
                                <descriptor>src/assembly/war-assembly.xml</descriptor>
                                
                            </descriptors>
                            
                            <!-- Output file and location -->
                            <finalName>worldwind-geoserver-${project.version}</finalName>
                            <outputDirectory>${project.build.directory}</outputDirectory>    
                                                    
                        </configuration>
                        <goals>
                            <goal>single</goal>
                        </goals>                        
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>